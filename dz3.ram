<input> 1 100
; r1 - N, number of the numbers
; r2 - i, cycle counter
; r3 - k, interior cycle counter
; r4 - current index, i+6
; r5 - current interior cycle index, k+6
; r6 - swap buffer
; r7 - last number
; r8 - ... number
; r[N+6] - first number

read 1
;; for (i=1;i<=N;i++) read r[i+6]
; in fact,
; ----------------------------------------------------------------------
; for (r2=N; r2>0; r2--) { r4=r2+6; read & store r[r4]; }
load 1 ; N
jz TheEnd
store 2 ; i

CycleForInput:
load 2
add =6
store 4 ; index

read 0
store *4

load 2
sub =1
store 2
jgtz CycleForInput

; ----------------------------------------------------------------------
; for (r2=N; r2>0; r2--) {
; 	r4=r2+6; 
;	for (r3=r2-1; r3>0; r3--) { 
;		r5=r3+6;
;		if (r[r4]>r[r5]) swap (r[r4], r[r5]);
; }}
load 1 ; N
store 2 ; r2
OuterCycle:
load 2
add =6
store 4 ; r4

load 2
sub =1
store 3 ; r3
jz PreventLastZero
InteriorCycle:
load 3
add =6
store 5 ; r5

; if (r[r5] > r[r4])...
load *5
sub *4
jgtz AfterSwap
; ... swap (r[r4], r[r5])
load *5
store 6
load *4
store *5
load 6
store *4

AfterSwap:
load 3
sub =1
store 3
jgtz InteriorCycle

load 2
sub =1
store 2
jgtz OuterCycle

PreventLastZero:
; ----------------------------------------------------------------------
; for (r2=N; r2>0; r2--) { r4=r2+6; write r[r4]; }
load 1 ; N
store 2 ; i

CycleForOutput:
load 2
add =6
store 4 ; index

write *4

load 2
sub =1
store 2
jgtz CycleForOutput

TheEnd:
halt